/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/balloonBouquetV4.gltf 
*/

import React, { useEffect, useMemo, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useCustomization } from '../../contexts/Customization'
import { MeshPhysicalMaterial, Color } from 'three'

const BalloonBouquetV4 = ({ position = [0, 0, 0], scale = 1, userData = {} }) => {
  const { nodes, materials } = useGLTF('/models/balloonBouquetV4.gltf', true)

  const { 
    balloonTypes,
    toggleBalloonType,
    balloonColors,
    balloonMaterials,
    setSelectedBalloon
  } = useCustomization();

  const groupRef = useRef();
  const mountedRef = useRef(false);

  useEffect(() => {
    if (groupRef.current && !mountedRef.current) {
      mountedRef.current = true;
      groupRef.current.userData = {
        ...userData,
        isBalloonBouquet: true,
        isARViewable: true
      };
      window.dispatchEvent(new CustomEvent('balloonBouquetLoaded'));
    }

    return () => {
      mountedRef.current = false;
    };
  }, [userData]);

  useEffect(() => {
    if (!nodes || !materials) {
      console.error('Model not loaded');
    }
  }, [nodes, materials]);

  const coloredMaterials = useMemo(() => {
    if (!nodes || !materials) {
      console.error('Cannot create materials');
      return {};
    }

    const newMaterials = {};
    
    Object.entries(balloonColors).forEach(([balloonId, color]) => {
      const materialType = balloonMaterials[balloonId];
      
      ['A', 'B', 'C'].forEach(part => {
        const meshName = `${balloonId.charAt(0).toUpperCase() + balloonId.slice(1)}${part}`;
        if (nodes[meshName]) {
          const material = new MeshPhysicalMaterial();
          material.color = new Color(color);
          
          switch(materialType) {
            case 'pearl':
              material.metalness = 0.1;
              material.roughness = 0.2;
              material.clearcoat = 1.0;
              material.clearcoatRoughness = 0.05;
              material.iridescence = 0.8;
              material.iridescenceIOR = 1.5;
              material.sheen = 1.0;
              material.sheenRoughness = 0.2;
              material.sheenColor = new Color(1.0, 1.0, 1.0);
              material.transmission = 0.0;
              material.transparent = false;
              material.opacity = 1.0;
              material.attenuationColor = new Color(0.95, 0.95, 1.0);
              material.attenuationDistance = 1.0;
              material.envMapIntensity = 2.0;
              break;
            case 'metallic':
              material.metalness = 0.95;
              material.roughness = 0.05;
              material.clearcoat = 1.0;
              material.clearcoatRoughness = 0.05;
              material.sheen = 0.5;
              material.sheenRoughness = 0.2;
              material.sheenColor = new Color(0.8, 0.8, 0.8);
              material.transmission = 0.05;
              material.transparent = true;
              material.opacity = 0.98;
              material.attenuationColor = new Color(0.7, 0.7, 0.7);
              material.attenuationDistance = 1.0;
              material.envMapIntensity = 2.5;
              break;
            default:
              material.roughness = 0.4;
              material.metalness = 0.0;
              material.clearcoat = 0.6;
              material.clearcoatRoughness = 0.2;
              material.sheen = 0.3;
              material.sheenRoughness = 0.4;
              material.transmission = 0.1;
              material.transparent = true;
              material.opacity = 0.95;
              material.sheenColor.set(0.9, 0.9, 0.9);
              material.attenuationColor = new Color(0.9, 0.9, 0.9);
              material.attenuationDistance = 1.0;
              material.envMapIntensity = 1.2;
              break;
          }
          
          newMaterials[meshName] = material;
        }
      });
    });
    
    return newMaterials;
  }, [balloonColors, balloonMaterials, nodes]);

  const handleBalloonClick = (balloonId, event) => {
    event.stopPropagation();
    console.log('Clicked balloon:', balloonId);
    setSelectedBalloon(balloonId);
  };

  const typeBScale = [9.5, 9.5, 9.5];

  return (
    <group 
      ref={groupRef} 
      position={position} 
      scale={[0.6, 0.6, 0.6]} 
      rotation={[0, 0, 0]}
      dispose={null}
    >
      <mesh geometry={nodes.Balloon_weight.geometry} material={materials.whiteString} position={[0.091, 0.131, -0.072]} rotation={[0, 0, -3.099]} scale={-0.047} />
      
      {/* Top Balloon Group */}
      <group position={[0.079, 2.964, -0.112]} rotation={[-1.81, 0.243, -0.734]} scale={0.26}>
        <mesh geometry={nodes.TopC.geometry} material={coloredMaterials.TopC || materials.Metallic} onClick={(e) => handleBalloonClick('top', e)} visible={balloonTypes.top === 'C'} userData={{ balloonId: 'top' }} />
        <mesh 
          geometry={nodes.TopA.geometry} 
          material={coloredMaterials.TopA || materials.Latex} 
          onClick={(e) => handleBalloonClick('top', e)} 
          visible={balloonTypes.top === 'A'}
          position={[-0.0001, -0.392, 0.878]}
          rotation={[1.895, 0.766, -3.078]}
          scale={1.673}
          userData={{ balloonId: 'top' }}
        />
        <mesh 
          geometry={nodes.TopB.geometry} 
          material={coloredMaterials.TopB || materials.Metallic} 
          onClick={(e) => handleBalloonClick('top', e)} 
          visible={balloonTypes.top === 'B'}
          scale={typeBScale}
          rotation={[-2.752, 0.05, -0.251]}
          position={[0.537, 1.501, -2.51]}
          userData={{ balloonId: 'top' }}
        />
        <mesh geometry={nodes.BodyStrings.geometry} material={materials.whiteString} position={[0.458, 1.627, -2.334]} rotation={[-2.743, 0.002, -1.073]} scale={9.906} />
      </group>

      {/* Middle1 Balloon Group */}
      <group position={[-0.138, 2.253, 0.345]} rotation={[-1.235, 0.129, -1.113]} scale={0.26}>
        <mesh geometry={nodes.Middle1C.geometry} material={coloredMaterials.Middle1C || materials['Metallic.002']} onClick={(e) => handleBalloonClick('middle1', e)} visible={balloonTypes.middle1 === 'C'} userData={{ balloonId: 'middle1' }} />
        <mesh 
          geometry={nodes.Middle1A.geometry} 
          material={coloredMaterials.Middle1A || materials['Latex.002']} 
          onClick={(e) => handleBalloonClick('middle1', e)} 
          visible={balloonTypes.middle1 === 'A'}
          position={[-0.0000, -0.692, 0.878]}
          rotation={[1.895, 0.766, -3.078]}
          scale={1.673}
          userData={{ balloonId: 'middle1' }}
        />
        <mesh 
          geometry={nodes.Middle1B.geometry} 
          material={coloredMaterials.Middle1B || materials['Metallic.002']} 
          onClick={(e) => handleBalloonClick('middle1', e)} 
          visible={balloonTypes.middle1 === 'B'}
          scale={typeBScale}
          rotation={[-2.752, 0.05, -0.251]}
          position={[0.537, 1.501, -2.51]}
          userData={{ balloonId: 'middle1' }}
        />
        <mesh geometry={nodes.Middle1BodyStrings.geometry} material={materials['whiteString.002']} position={[0.583, 1.473, -2.677]} rotation={[-2.751, 0.251, -0.75]} scale={9.906} />
      </group>

      {/* Middle2 Balloon Group */}
      <group position={[0.562, 2.258, -0.144]} rotation={[-1.351, 0.69, -2.351]} scale={0.26}>
        <mesh geometry={nodes.Middle2C.geometry} material={coloredMaterials.Middle2C || materials['Metallic.004']} onClick={(e) => handleBalloonClick('middle2', e)} visible={balloonTypes.middle2 === 'C'} userData={{ balloonId: 'middle2' }} />
        <mesh 
          geometry={nodes.Middle2A.geometry} 
          material={coloredMaterials.Middle2A || materials['Latex.003']} 
          onClick={(e) => handleBalloonClick('middle2', e)} 
          visible={balloonTypes.middle2 === 'A'}
          position={[-0.1001, -0.062, 0.878]}
          rotation={[1.895, 0.766, -3.078]}
          scale={1.673}
          userData={{ balloonId: 'middle2' }}
        />
        <mesh 
          geometry={nodes.Middle2B.geometry} 
          material={coloredMaterials.Middle2B || materials['Metallic.004']} 
          onClick={(e) => handleBalloonClick('middle2', e)} 
          visible={balloonTypes.middle2 === 'B'}
          scale={typeBScale}
          rotation={[-2.752, 0.05, -0.251]}
          position={[0.537, 1.501, -2.51]}
          userData={{ balloonId: 'middle2' }}
        />
        <mesh geometry={nodes.Middle2BodyStrings.geometry} material={materials['whiteString.003']} position={[0.047, 1.916, -2.53]} rotation={[-2.668, -0.1, -1.352]} scale={9.906} />
      </group>

      {/* Middle3 Balloon Group */}
      <group position={[-0.199, 2.206, -0.567]} rotation={[-1.655, -0.353, 3.008]} scale={0.26}>
        <mesh geometry={nodes.Middle3C.geometry} material={coloredMaterials.Middle3C || materials['Metallic.005']} onClick={(e) => handleBalloonClick('middle3', e)} visible={balloonTypes.middle3 === 'C'} userData={{ balloonId: 'middle3' }} />
        <mesh 
          geometry={nodes.Middle3A.geometry} 
          material={coloredMaterials.Middle3A || materials['Latex.004']} 
          onClick={(e) => handleBalloonClick('middle3', e)} 
          visible={balloonTypes.middle3 === 'A'}
          position={[-0.0001, -0.392, 0.878]}
          rotation={[1.895, 0.766, -3.078]}
          scale={1.673}
          userData={{ balloonId: 'middle3' }}
        />
        <mesh 
          geometry={nodes.Middle3B.geometry} 
          material={coloredMaterials.Middle3B || materials['Metallic.005']} 
          onClick={(e) => handleBalloonClick('middle3', e)} 
          visible={balloonTypes.middle3 === 'B'}
          scale={typeBScale}
          rotation={[-2.752, 0.05, -0.251]}
          position={[0.537, 1.501, -2.51]}
          userData={{ balloonId: 'middle3' }}
        />
        <mesh geometry={nodes.Middle3BodyStrings.geometry} material={materials['whiteString.004']} position={[0.536, 1.874, -3.049]} rotation={[-2.857, 0.218, -0.968]} scale={9.906} />
      </group>

      {/* Bottom1 Balloon Group */}
      <group position={[0.212, 1.25, 0.506]} rotation={[-1.257, 0.295, -0.309]} scale={0.26}>
        <mesh geometry={nodes.Bottom1C.geometry} material={coloredMaterials.Bottom1C || materials['Metallic.006']} onClick={(e) => handleBalloonClick('bottom1', e)} visible={balloonTypes.bottom1 === 'C'} userData={{ balloonId: 'bottom1' }} />
        <mesh 
          geometry={nodes.Bottom1A.geometry} 
          material={coloredMaterials.Bottom1A || materials['Latex.005']} 
          onClick={(e) => handleBalloonClick('bottom1', e)} 
          visible={balloonTypes.bottom1 === 'A'}
          position={[-0.0001, -0.392, 0.878]}
          rotation={[1.895, 0.766, -3.078]}
          scale={1.673}
          userData={{ balloonId: 'bottom1' }}
        />
        <mesh 
          geometry={nodes.Bottom1B.geometry} 
          material={coloredMaterials.Bottom1B || materials['Metallic.006']} 
          onClick={(e) => handleBalloonClick('bottom1', e)} 
          visible={balloonTypes.bottom1 === 'B'}
          scale={typeBScale}
          rotation={[-2.752, 0.05, -0.251]}
          position={[0.537, 1.501, -2.51]}
          userData={{ balloonId: 'bottom1' }}
        />
        <mesh geometry={nodes.Bottom1ABodyStrings.geometry} material={materials['whiteString.005']} position={[0.431, 1.817, -2.654]} rotation={[-2.6, 0.145, -0.899]} scale={9.906} />
      </group>

      {/* Bottom2 Balloon Group */}
      <group position={[0.372, 1.217, -0.462]} rotation={[-2.069, 0.624, -1.101]} scale={0.26}>
        <mesh geometry={nodes.Bottom2C.geometry} material={coloredMaterials.Bottom2C || materials['Metallic.007']} onClick={(e) => handleBalloonClick('bottom2', e)} visible={balloonTypes.bottom2 === 'C'} userData={{ balloonId: 'bottom2' }} />
        <mesh 
          geometry={nodes.Bottom2A.geometry} 
          material={coloredMaterials.Bottom2A || materials['Latex.006']} 
          onClick={(e) => handleBalloonClick('bottom2', e)} 
          visible={balloonTypes.bottom2 === 'A'}
          position={[-0.0001, -0.392, 0.878]}
          rotation={[1.895, 0.766, -3.078]}
          scale={1.673}
          userData={{ balloonId: 'bottom2' }}
        />
        <mesh 
          geometry={nodes.Bottom2B.geometry} 
          material={coloredMaterials.Bottom2B || materials['Metallic.007']} 
          onClick={(e) => handleBalloonClick('bottom2', e)} 
          visible={balloonTypes.bottom2 === 'B'}
          scale={typeBScale}
          rotation={[-2.752, 0.05, -0.251]}
          position={[0.537, 1.501, -2.51]}
          userData={{ balloonId: 'bottom2' }}
        />
        <mesh geometry={nodes.Bottom1ABodyStrings001.geometry} material={materials['whiteString.006']} position={[0.591, 1.662, -2.547]} rotation={[-2.813, 0.127, -1.047]} scale={9.906} />
      </group>

      {/* Bottom3 Balloon Group */}
      <group position={[-0.453, 1.267, -0.174]} rotation={[-1.349, -0.318, -2.183]} scale={0.26}>
        <mesh geometry={nodes.Bottom3C.geometry} material={coloredMaterials.Bottom3C || materials['Metallic.008']} onClick={(e) => handleBalloonClick('bottom3', e)} visible={balloonTypes.bottom3 === 'C'} userData={{ balloonId: 'bottom3' }} />
        <mesh 
          geometry={nodes.Bottom3A.geometry} 
          material={coloredMaterials.Bottom3A || materials['Latex.007']} 
          onClick={(e) => handleBalloonClick('bottom3', e)} 
          visible={balloonTypes.bottom3 === 'A'}
          position={[-0.0001, -0.392, 0.878]}
          rotation={[1.895, 0.766, -3.078]}
          scale={1.673}
          userData={{ balloonId: 'bottom3' }}
        />
        <mesh 
          geometry={nodes.Bottom3B.geometry} 
          material={coloredMaterials.Bottom3B || materials['Metallic.008']} 
          onClick={(e) => handleBalloonClick('bottom3', e)} 
          visible={balloonTypes.bottom3 === 'B'}
          scale={typeBScale}
          rotation={[-2.752, 0.05, -0.251]}
          position={[0.537, 1.501, -2.51]}
          userData={{ balloonId: 'bottom3' }}
        />
        <mesh geometry={nodes.Bottom3BodyStrings.geometry} material={materials['whiteString.007']} position={[0.491, 1.78, -2.5]} rotation={[-2.507, 0.271, -0.957]} scale={9.906} />
      </group>
    </group>
  )
}

useGLTF.preload('/models/balloonBouquetV4.gltf')

export default BalloonBouquetV4
